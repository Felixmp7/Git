1. Crear repositorio:

	* git init <nombre del repositorio>
	O, si ya tengo una carpeta con archivos, utilizo "git init" solamente y listo.

2. Añadir cambios al staging:

	git add

3. Commit

	git commit -m [“mensaje”]: Es bueno ser descriptivos con el mensaje para saber lo
	que se hizo en ese commit y para informar al resto de personas.

	git commit --amend: concatena nuevos cambios al commit anterior.

	git log: nos muestra la historia de todos los commits que hemos realizados.

4.Tags

	git tag: nos permite agregar etiquetas a nuestros cambios.
		-a para la anotación
		-m para el mensaje
		-l nos muestra la lista de etiquetas
		-f para renombrar
		-d para borrar
		
5. Log
	
	git log --oneline :Lista todos los commits en una linea
	git log --oneline --graph : Muestra un grafico
	git log -<numero de commits que quieres ver>

	*Utiliza git superlog, es mejor*

6. Diff

	git diff <sha1> <sha2> 	
	git diff también funciona con los tags.
	
	
7. Reset

	7.1 git reset --soft <sha del commit> 
	
	Permite resetear o devolverme en el tiempo hasta cierto commit y no borra las
	modificaciones posteriores al commit que estoy volviendo, solo las deja en staging.
	
	7.2 git reset --mixed <sha del commit>
	
	Permite resetear o devolverme en el tiempo hasta cierto commit y no borra las
	modificaciones posteriores al commit que estoy volviendo, tampoco las deja en
	staging, las deja en tu local (working directory).
	
	7.3 git reset --hard <sha del commit>
	
	Borra absolutamente todo hasta el commit del sha.
	Sin embargo... si tengo registrado un sha que ya no existe despues de haber hecho
	el reset --hard y vuelvo a escribir git reset --hard <sha de un commit que ya no
	existe> puedo volver a recuperar todo.
	
	Consejo: Antes de hacer un git reset --hard , anota o copia el ultimo sha que tengas
	porsia.
	
	
8. Branches

	8.1 Crear Ramas

	Master: Rama por default que inicia en cualquier repositorio.
	git branch <nombre de la rama>: Crear Rama nueva
	git branch -d <nombre de la rama>: Borrar Rama
	git branch -D <nombre de la rama>: Borrar Rama con cambios.
	git branch: Ver ramas
	git branch -l: Ver ramas ocultas. 
	-m [nombre] [nombre_nuevo]: para renombrar ramas.
	
	8.2 Movernos entre ramas
	
	git checkout <Nombre de la rama> : Moverme entre ramas
	git checkout <sha del commit> : Moverme en el tiempo a un commit
	git checkout -b <nombre de la nueva rama>: Crear una rama y situarte directo 
	en la rama.
	
	8.3 Merge
	
		1. Posicionarme en la rama que quiero que obtenga los cambios
		2. git merge <nombre de rama que quiero fusionar> 

9. Cherry Pick : Sacar cambios especificos de una rama y mezclarlos en otra

	1. Copiar el sha del commit.
	2. Trasladarnos a la rama que deberia tener el commit.
	3. git cherry-pick <sha copiado> y enter
